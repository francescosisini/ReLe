#include <stdio.h> /* printf, sprintf */
#include <stdlib.h> /* exit */
#include <unistd.h> /* read, write, close */
#include <string.h> /* memcpy, memset */
#include <sys/socket.h> /* socket, connect */
#include <netinet/in.h> /* struct sockaddr_in, struct sockaddr */
#include <netdb.h> /* struct hostent, gethostbyname */

void error(const char *msg) { perror(msg); exit(0); }

/***: web ***/

void encode_url(char * msg,char *emsg){
  int c;
  char *hex = "0123456789abcdef";
  
  while( c=*(msg++) ){
    if( ('a' <= c && c <= 'z')
	|| ('A' <= c && c <= 'Z')
	|| ('0' <= c && c <= '9') ){
      *(emsg++)=c;
    } else
      {
	*(emsg++)='%';
	*(emsg++)=hex[c >> 4];
	*(emsg++)=hex[c & 15];	
      }
  }
}

int main(int argc,char *argv[])
{
   
  int portno =        80;
  char *host =        "beembee.it";

   char str[100];
   while(1)
   {
     scanf("%s",str);
     fflush(stdout);
     *(str+10)=0;
     
     
     char *message_fmt;
     message_fmt = malloc(4000*sizeof(char));
     
     
     strcat(message_fmt,"GET /check/");
     strcat(message_fmt,str);
     strcat(message_fmt," HTTP/1.1\r\nHost: www.beembee.it\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n\r\n");
     
     //message_fmt = "GET /rfid.php HTTP/1.1\r\nHost: pumar.local\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n\r\n";
     
     struct hostent *server;
     struct sockaddr_in serv_addr;
     int sockfd, bytes, sent, received, total;
     char message[4096],response[12096];
     
     
     
     
     
     sprintf(message,message_fmt);
     printf("Request:\n%s\n",message);
     
     /* create the socket */
     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd < 0) error("ERROR opening socket");

     /* lookup the ip address */
     server = gethostbyname(host);
     if (server == NULL) error("ERROR, no such host");
     
     /* fill in the structure */
     memset(&serv_addr,0,sizeof(serv_addr));
     serv_addr.sin_family = AF_INET;
     serv_addr.sin_port = htons(portno);
     memcpy(&serv_addr.sin_addr.s_addr,server->h_addr,server->h_length);
     
     /* connect the socket */
     if (connect(sockfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr)) < 0)
       error("ERROR connecting");
     
     /* send the request */
     total = strlen(message);
     sent = 0;
     do {
       bytes = write(sockfd,message+sent,total-sent);
       if (bytes < 0)
         error("ERROR writing message to socket");
       if (bytes == 0)
         break;
       sent+=bytes;
     } while (sent < total);
     
     /* receive the response */
     memset(response,0,sizeof(response));
     total = sizeof(response)-1;
     received = 0;
     do {
       bytes = read(sockfd,response+received,total-received);
       if (bytes < 0)
            error("ERROR reading response from socket");
       if (bytes == 0)
         break;
       received+=bytes;
       
     } while (received < total);
     
     if (received == total)
       printf("ERROR storing complete response from socket...");
     
     /* close the socket */
     close(sockfd);
     
     /* process response */
     printf("Response:\n%s\n",response);
     fflush(stdout);
   }
    return 0;
}
